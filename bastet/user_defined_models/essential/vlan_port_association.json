{
  "type_name": "VlanPortAssociation",
  "resource_name": "vlan_port_associations",
  "to_be_migrated": true,
  "is_controller_enabled": true,
  "is_many_to_many_association": true,
  "fields": [
    {
      "name": "VlanID",
      "tag": "json:\"vlan_id\" yaml:\"vlan_id\" gorm:\"primary_key\" sql:\"type:integer references vlans(id)\" clay:\"many_to_many_left_resource_name=vlans\"",
      "type_name": "int"
    },
    {
      "name": "Vlan",
      "tag": "json:\"vlan\" yaml:\"vlan\" gorm:\"ForeignKey:VlanID\" validate:\"omitempty,dive\"",
      "type_name": "Vlan"
    },
    {
      "name": "PortID",
      "tag": "json:\"port_id\" yaml:\"port_id\" gorm:\"primary_key\" sql:\"type:integer references ports(id)\" clay:\"many_to_many_right_resource_name=ports\"",
      "type_name": "int"
    },
    {
      "name": "Port",
      "tag": "json:\"port\" yaml:\"port\" gorm:\"ForeignKey:PortID\" validate:\"omitempty,dive\"",
      "type_name": "Port"
    }
  ],
  "sql_after_migration": [
    "drop trigger if exists DeleteVlanPortAssociationBeforeVlanDeletion;",
    "create trigger if not exists DeleteVlanPortAssociationBeforeVlanDeletion before delete on vlans",
    "  begin",
    "    delete from vlan_port_associations where vlan_id = old.id;",
    "  end;",
    "drop trigger if exists DeleteVlanPortAssociationBeforePortDeletion;",
    "create trigger if not exists DeleteVlanPortAssociationBeforePortDeletion before delete on ports",
    "  begin",
    "    delete from vlan_port_associations where port_id = old.id;",
    "  end;",
    "drop trigger if exists DeleteAndInsertVlanPortAssociationAfterPortInsertion;",
    "create trigger if not exists DeleteAndInsertVlanPortAssociationAfterPortInsertion after insert on ports",
    "  begin",
    "    delete from vlan_port_associations where port_id = new.id;",
    "    insert into vlan_port_associations(vlan_id, port_id) select vlans as vlan_id, ports_id as port_id from",
    "      (with recursive split_vlans(ports_id, vlans, rest) as (",
    "        select id, '', vlans || ',' from ports where id",
    "          union all",
    "        select ports_id,",
    "          substr(rest, 0, instr(rest, ',')),",
    "          substr(rest, instr(rest, ',')+1)",
    "        from split_vlans",
    "        where rest <> '')",
    "      select ports_id, vlans ",
    "      from split_vlans ",
    "      where vlans <> ''",
    "      order by ports_id asc) where ports_id = new.id;",
    "  end;",
    "drop trigger if exists DeleteAndInsertVlanPortAssociationAfterPortUpdate;",
    "create trigger if not exists DeleteAndInsertVlanPortAssociationAfterPortUpdate after update of vlans on ports",
    "  begin",
    "    delete from vlan_port_associations where port_id = new.id;",
    "    insert into vlan_port_associations(vlan_id, port_id) select vlans as vlan_id, ports_id as port_id from",
    "      (with recursive split_vlans(ports_id, vlans, rest) as (",
    "        select id, '', vlans || ',' from ports where id",
    "          union all",
    "        select ports_id,",
    "          substr(rest, 0, instr(rest, ',')),",
    "          substr(rest, instr(rest, ',')+1)",
    "        from split_vlans",
    "        where rest <> '')",
    "      select ports_id, vlans ",
    "      from split_vlans ",
    "      where vlans <> ''",
    "      order by ports_id asc) where ports_id = new.id;",
    "  end;"
  ]
}
