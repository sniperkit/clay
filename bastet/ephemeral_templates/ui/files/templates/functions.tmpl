{{/* <script> */}}

$.fn.dataTable.ext.order['dom-text'] = function(settings, col)
{
    return this.api().column(col, {order:'index'}).nodes().map(function(td, i) {
        return $('input', td).val();
    });
}

$.fn.dataTable.ext.order['dom-text-numeric'] = function(settings, col)
{
    return this.api().column(col, {order:'index'}).nodes().map(function(td, i) {
        return $('input', td).val() * 1;
    });
}

$.fn.dataTable.ext.order['dom-select'] = function (settings, col)
{
    return this.api().column(col, {order:'index'}).nodes().map(function(td, i) {
        return $('select', td).val();
    });
}

var spinnerOptions = {
  lines: 13,
  length: 33,
  width: 11,
  radius: 16,
  corners: 1,
  rotate: 74,
  direction: 1,
  color: '#000',
  speed: 1.5,
  trail: 71,
  shadow: true,
  hwaccel: true,
  className: 'spinner',
  zIndex: 2e9,
  top: '50%',
  left: '50%',
  opacity: .25,
  fps: 20
};

var spinner = new Spinner(spinnerOptions);

$(document).ajaxStart(function() {
  target = document.getElementById('spin_area');
  spinner.spin(target);
})
.ajaxStop(function() {
  spinner.stop();
});

function getResources(target, query, callbackSuccess, callbackFailure) {
  if (query != '' && query != undefined && query != null) {
    query = '?' + query;
  } else {
    query = '';
  }

  return $.ajax({
    type: 'GET',
    url: '/' + target + query,
    dataType: 'json',
    contentType: 'application/json'
  }).done(function(result, status, xhr) {
    if ((callbackSuccess != null) && (callbackSuccess != undefined)) {
      callbackSuccess(result, xhr);
    }
  }).fail(function(xhr) {
    if ((callbackFailure != null) && (callbackFailure != undefined)) {
      callbackFailure(xhr);
    } else {
      showProcessResult({}, xhr, 200, '');
    }
  }).always(function(){
  });
}

function getResource(target, id, query, callbackSuccess, callbackFailure) {
  if (query != '' && query != undefined && query != null) {
    query = '?' + query;
  } else {
    query = '';
  }

  $.ajax({
    type: 'GET',
    url: '/' + target + '/' + id + query,
    dataType: 'json',
    contentType: 'application/json'
  }).done(function(result, status, xhr) {
    if ((callbackSuccess != null) && (callbackSuccess != undefined)) {
      callbackSuccess(result, xhr);
    }
  }).fail(function(xhr) {
    if ((callbackFailure != null) && (callbackFailure != undefined)) {
      callbackFailure(xhr);
    } else {
      showProcessResult({}, xhr, 200, '');
    }
  }).always(function(){
  });
}

function getResourceAsText(target, id, query, callbackSuccess, callbackFailure) {
  if (query != '' && query != undefined && query != null) {
    query = '?' + query;
  } else {
    query = '';
  }

  $.ajax({
    type: 'GET',
    url: '/' + target + '/' + id + query
  }).done(function(result, status, xhr) {
    if ((callbackSuccess != null) && (callbackSuccess != undefined)) {
      callbackSuccess(result, xhr);
    }
  }).fail(function(xhr) {
    if ((callbackFailure != null) && (callbackFailure != undefined)) {
      callbackFailure(xhr);
    } else {
      showProcessResult({}, xhr, 200, '');
    }
  }).always(function(){
  });
}

function postResource(target, resource, query, callbackSuccess, callbackFailure) {
  if (query != '' && query != undefined && query != null) {
    query = '?' + query;
  } else {
    query = '';
  }

  $.ajax({
    type: 'POST',
    url: '/' + target + query,
    dataType: 'json',
    contentType: 'application/json',
    data: JSON.stringify(resource)
  }).done(function(result, status, xhr) {
    if ((callbackSuccess != null) && (callbackSuccess != undefined)) {
      callbackSuccess(result, xhr);
    } else {
      showProcessResult(result, xhr, 201, 'The resource has been created successfully.');
    }
  }).fail(function(xhr) {
    if ((callbackFailure != null) && (callbackFailure != undefined)) {
      callbackFailure(xhr);
    } else {
      showProcessResult({}, xhr, 201, '');
    }
  }).always(function(){
  });
}

function putResource(target, id, resource, query, callbackSuccess, callbackFailure) {
  if (query != '' && query != undefined && query != null) {
    query = '?' + query;
  } else {
    query = '';
  }

  $.ajax({
    type: 'PUT',
    url: '/' + target + '/' + id + query,
    dataType: 'json',
    contentType: 'application/json',
    data: JSON.stringify(resource)
  }).done(function(result, status, xhr) {
    if ((callbackSuccess != null) && (callbackSuccess != undefined)) {
      callbackSuccess(result, xhr);
    } else {
      showProcessResult(result, xhr, 200, 'The resource has been updated successfully.');
    }
  }).fail(function(xhr) {
    if ((callbackFailure != null) && (callbackFailure != undefined)) {
      callbackFailure(xhr);
    } else {
      showProcessResult({}, xhr, 200, '');
    }
  }).always(function(){
  });
}

function deleteResource(target, id, query, callbackSuccess, callbackFailure) {
  if (query != '' && query != undefined && query != null) {
    query = '?' + query;
  } else {
    query = '';
  }

  $.ajax({
    type: 'DELETE',
    url: '/' + target + '/' + id + query,
    dataType: 'json',
    contentType: 'application/json'
  }).done(function(result, status, xhr) {
    if ((callbackSuccess != null) && (callbackSuccess != undefined)) {
      callbackSuccess(result, xhr);
    } else {
      showProcessResult(result, xhr, 200, 'The resource has been updated successfully.');
    }
  }).fail(function(xhr) {
    if ((callbackFailure != null) && (callbackFailure != undefined)) {
      callbackFailure(xhr);
    } else {
      showProcessResult({}, xhr, 204, '');
    }
  }).always(function(){
  });
}

function buildResouceMapFromResourceArray(resources, key) {
  var result = {};
  for (var i = 0; i < resources.length; i = i + 1) {
    var resource = resources[i];
    if (key == undefined) {
      result[resource.id] = resource;
    } else {
      result[resource[key]] = resource;
    }
  }
  return result;
}

function rebuildMapByName(resourceMap) {
  var result = {};
  for (key in resourceMap) {
    result[resourceMap[key].name] = resourceMap[key];
  }
  return result;
}

function convertSqlNullObject(nullValue, typeString, value) {
  var result = {};
  if (typeString == 'Int64') {
    result[typeString] = parseInt(value);
  } else {
    result[typeString] = value;
  }
  if (nullValue == value) {
    result['Valid'] = false;
  }
  else {
    result['Valid'] = true;
  }
  return result;
}

function convertStringToBoolean(value) {
  if (!value) {
    return false;
  }
  return (value.toLowerCase()) == 'true';
}

function convertBooleanToString(value) {
  if (!value) {
    return 'false';
  }
  return 'true';
}

function getUrlVars() {
  var vars = [], hash;
  var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
  for (var i = 0; i < hashes.length; i++) {
    hash = hashes[i].split('=');
    vars.push(hash[0]);
    vars[hash[0]] = hash[1];
  }
  return vars;
}

function createFormElement(name) {
	var form = $('<form>').prop('name', name)[0];
	return form;
}

function createCheckboxElement(name, style, value) {
	var input = $('<input>').prop('name', name).prop('style', style).prop('type', 'checkbox').attr('checked', value)[0];
	return input;
}

function createTextElement(name, classValue, style, placeholder, value) {
	var input = $('<input>').prop('name', name).prop('class', classValue).prop('type', 'text').prop('style', style).prop('placeholder', placeholder).val(value).attr('value', value)[0];
	return input;
}

function createReadOnlyTextElement(name, classValue, style, placeholder, value) {
	var input = $('<input>').prop('name', name).prop('class', classValue).prop('type', 'text').prop('style', style).prop('placeholder', placeholder).prop('readonly', true).val(value).attr('value', value)[0];
	return input;
}

function createIPv4TrElement(ipv4Address, deletable, readonly) {
  var propReadOnly = false;
  if (readonly == true) {
    propReadOnly = true;
  }

  var tr = $('<tr>').prop('class', 'in-table');
  var tdAddress = $('<td>').prop('class', 'in-table');
  var tdSlash = $('<td>').prop('class', 'in-table');
  var tdPrefix = $('<td>').prop('class', 'in-table');
  var tdDelete = $('<td>').prop('class', 'in-table');

  var inputID = $('<input>').prop('name', 'id').prop('type', 'hidden');
  var inputAddress = $('<input>').prop('name', 'address').prop('class', 'in-table ipv4-address').prop('type', 'text').prop('placeholder', '0.0.0.0').prop('readonly', propReadOnly);
  var inputPrefix = $('<input>').prop('name', 'prefix').prop('class', 'in-table ipv4-prefix').prop('type', 'text').prop('placeholder', '0').prop('readonly', propReadOnly);
  var buttonDelete = $('<button>').prop('name', 'delete_ipv4_address_btn').prop('class', 'btn btn-default').prop('type', 'button');
  var spanDelete = $('<span>').prop('class', 'glyphicon glyphicon-minus');
  if ((ipv4Address != null) && (ipv4Address != undefined)) {
    inputID.val(ipv4Address.id).attr('value', ipv4Address.id);
    inputAddress.val(ipv4Address.address).attr('value', ipv4Address.address);
    inputPrefix.val(ipv4Address.prefix).attr('value', ipv4Address.prefix);
  }

  tdAddress.append(inputID);
  tdAddress.append(inputAddress);
  tdSlash.append('&nbsp;/&nbsp;');
  tdPrefix.append(inputPrefix);
  buttonDelete.append(spanDelete);
  tdDelete.append(buttonDelete);

  tr.append(tdAddress);
  tr.append(tdSlash);
  tr.append(tdPrefix);

  if (deletable) {
    tr.append(tdDelete);
  }

  return tr[0];
}

function createIPv4TableElement(ipv4Addresses, appendable, deletable, readonly) {
	var table = $('<table>').prop('class', 'in-table ipv4-addresses');
  for (var i = 0; i < ipv4Addresses.length; i = i + 1) {
    var tr = createIPv4TrElement(ipv4Addresses[i], deletable, readonly);
    table.append(tr);
  }

  if (appendable) {
    var tr = $('<tr>').prop('class', 'in-table');
    var tdAddress = $('<td>').prop('class', 'in-table');
    var tdSlash = $('<td>').prop('class', 'in-table');
    var tdPrefix = $('<td>').prop('class', 'in-table');
    var tdAdd = $('<td>').prop('class', 'in-table');

    var inputAddressSpacer = $('<input>').prop('name', 'address_spacer').prop('class', 'in-table ipv4-address').prop('type', 'text').prop('readonly', true);
    var inputPrefixSpacer = $('<input>').prop('name', 'prefix_spacer').prop('class', 'in-table ipv4-prefix').prop('type', 'text').prop('readonly', true);
    var buttonAdd = $('<button>').prop('name', 'add_ipv4_address_btn').prop('class', 'btn btn-default').prop('type', 'button');
    var spanAdd = $('<span>').prop('class', 'glyphicon glyphicon-plus');

    tdAddress.append(inputAddressSpacer);
    tdSlash.append('&nbsp;&nbsp;&nbsp;');
    tdPrefix.append(inputPrefixSpacer);
    buttonAdd.append(spanAdd);
    tdAdd.append(buttonAdd);

    tr.append(tdAddress);
    tr.append(tdSlash);
    tr.append(tdPrefix);
    tr.append(tdAdd);

    table.append(tr);
  }

  return table[0];
}

function createHiddenElement(name, value) {
	var input = $('<input>').prop('name', name).prop('type', 'hidden').val(value).attr('value', value)[0];
	return input;
}

function createButtonElement(name, buttonClass, spanClass, text) {
  var button = $('<button>').prop('name', name).prop('class', buttonClass).prop('type', 'button');

  if ((spanClass != null) && (spanClass != undefined)) {
    var span = $('<span>').prop('class', spanClass);
    button.append(span);
  }

  button.append(text);

	return button[0];
}

function createButtonGroupElement(buttonElements) {
  var span = $('<span>').prop('class', 'input-group-btn');

  for (i = 0; i < buttonElements.length; i = i + 1) {
    var buttonElement = buttonElements[i];
    button = createButtonElement(buttonElement.name, buttonElement.buttonClass, buttonElement.spanClass, buttonElement.text);
    span.append(button);
  }

  return span[0];
}

function createSelectOptionsElement(optionItems) {
	var result = [];
	for (var i = 0; i < optionItems.length; i = i + 1) {
		result.push($('<option>').val(optionItems[i].id).text(optionItems[i].name));
	}
	return result;
}

function createSelectElement(name, classValue, style, optionItems, value) {
	var select =  $('<select>').prop('name', name).prop('class', 'classValue').prop('style', style);
	var options = createSelectOptionsElement(optionItems);
	for (var i = 0; i < options.length; i = i + 1) {
		if (value == options[i].val()) {
			select.append(options[i].attr('selected', 'selected'));
		} else {
			select.append(options[i]);
		}
	}
	return select[0];
}

function showProcessResult(result, xhr, successCode, successMessage) {
  if (xhr.status == successCode) {
    $('html,body').animate({
      scrollTop: 0
    }, 'slow');
    $('#information_message').text(successMessage);
    $('#alert_info').fadeIn(500).delay(2000).fadeOut(1000);
    return true;
  }
  else {
    $('html,body').animate({
      scrollTop: 0
    }, 'slow');
    $('#error_message').text(xhr.responseJSON.error);
    $('#alert_error').fadeIn(500).delay(2000).fadeOut(1000);
    return false;
  }
}

function loopSleep(_loopLimit, _interval, _mainFunc){
  var loopLimit = _loopLimit;
  var interval = _interval;
  var mainFunc = _mainFunc;
  var i = 0;
  var loopFunc = function () {
    var result = mainFunc(i);
    if (result === false) {
      return;
    }
    i = i + 1;
    if (i < loopLimit) {
      setTimeout(loopFunc, interval);
    }
  }
  loopFunc();
}
